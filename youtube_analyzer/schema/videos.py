# generated by datamodel-codegen:
#   filename:  video_info.json
#   timestamp: 2022-12-10T16:32:19+00:00

from __future__ import annotations

from typing import Any, Dict, List

from pydantic import BaseModel, Field, validator

from miscellaneous.logger import logger


class Default(BaseModel):
    url: str
    width: int
    height: int


class Medium(BaseModel):
    url: str
    width: int
    height: int


class High(BaseModel):
    url: str
    width: int
    height: int


class Standard(BaseModel):
    url: str
    width: int
    height: int


class Maxres(BaseModel):
    url: str
    width: int
    height: int


class Thumbnails(BaseModel):
    default: Default
    medium: Medium
    high: High
    standard: Standard | None
    maxres: Maxres | None


class Localized(BaseModel):
    title: str
    description: str


class Snippet(BaseModel):
    published_at: str = Field("", alias="publishedAt")
    channel_id: str = Field("", alias="channelId")
    title: str
    description: str
    thumbnails: Thumbnails
    channel_title: str = Field("", alias="channelTitle")
    category_id: str = Field("", alias="categoryId")
    live_broadcast_content: str = Field("", alias="liveBroadcastContent")
    default_language: str = Field("", alias="defaultLanguage")
    localized: Localized
    default_audio_language: str = Field("", alias="defaultAudioLanguage")


class ContentDetails(BaseModel):
    duration: str | None
    dimension: str
    definition: str
    caption: str
    licensed_content: bool = Field(..., alias="licensedContent")
    content_rating: Dict[str, Any] = Field(..., alias="contentRating")
    projection: str


class Status(BaseModel):
    upload_status: str = Field(..., alias="uploadStatus")
    privacy_status: str = Field(..., alias="privacyStatus")
    license: str
    embeddable: bool
    public_stats_viewable: bool = Field(..., alias="publicStatsViewable")
    made_for_kids: bool = Field(..., alias="madeForKids")


class Statistics(BaseModel):
    view_count: str = Field(..., alias="viewCount")
    like_count: str = Field(..., alias="likeCount")
    favorite_count: str = Field(..., alias="favoriteCount")
    comment_count: str = Field("", alias="commentCount")


class Player(BaseModel):
    embed_html: str = Field(..., alias="embedHtml")


class TopicDetails(BaseModel):
    topic_categories: List[str] = Field(..., alias="topicCategories")


class StandardLanguageCodes(BaseModel):
    title: str
    description: str


# class Localizations(BaseModel):
#     en: StandardLanguageCodes | None = Field(..., alias='en')
#     en_gb: StandardLanguageCodes | None = Field(..., alias='en-GB')
#     en_us: StandardLanguageCodes | None = Field(..., alias='en-US')
#     de: StandardLanguageCodes | None = Field(..., alias='de')
#     de_DE: StandardLanguageCodes | None = Field(..., alias='de-DE')


class VideosItem(BaseModel):
    kind: str
    etag: str
    id: str
    snippet: Snippet
    content_details: ContentDetails = Field(..., alias="contentDetails")
    status: Status
    statistics: Statistics
    player: Player
    topic_details: TopicDetails = Field(
        TopicDetails(topicCategories=[]), alias="topicDetails"
    )
    recording_details: Dict[str, Any] = Field(..., alias="recordingDetails")
    # localizations: Localizations | None


class PageInfo(BaseModel):
    total_results: int = Field(..., alias="totalResults")
    results_per_page: int = Field(..., alias="resultsPerPage")


class Videos(BaseModel):
    kind: str
    etag: str
    items: List[VideosItem]
    page_info: PageInfo = Field(..., alias="pageInfo")

    @validator("*", pre=True)
    def print_pre(cls, value):
        logger.debug(
            f"pre_validator of pydantic_model '%s' with content: %s", cls.__name__, value
        )
        return value

    @validator("*", pre=False)
    def print_post(cls, value):
        logger.debug(
            f"post_validator of pydantic_model '%s' with content: %s", cls.__name__, value
        )
        return value
