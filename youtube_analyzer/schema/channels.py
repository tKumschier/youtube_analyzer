# generated by datamodel-codegen:
#   filename:  channel_stats.json
#   timestamp: 2022-12-10T16:34:00+00:00

from __future__ import annotations

from typing import Any, Dict, List

from pydantic import BaseModel, Field


class PageInfo(BaseModel):
    total_results: int = Field(..., alias="totalResults")
    results_per_page: int = Field(..., alias="resultsPerPage")


class Default(BaseModel):
    url: str
    width: int
    height: int


class Medium(BaseModel):
    url: str
    width: int
    height: int


class High(BaseModel):
    url: str
    width: int
    height: int


class Thumbnails(BaseModel):
    default: Default
    medium: Medium
    high: High


class Localized(BaseModel):
    title: str
    description: str


class Snippet(BaseModel):
    title: str
    description: str
    custom_url: str = Field(..., alias="customUrl")
    published_at: str = Field(..., alias="publishedAt")
    thumbnails: Thumbnails
    localized: Localized
    country: str = ""


class RelatedPlaylists(BaseModel):
    likes: str
    uploads: str


class ContentDetails(BaseModel):
    related_playlists: RelatedPlaylists = Field(..., alias="relatedPlaylists")


class Statistics(BaseModel):
    view_count: str = Field(..., alias="viewCount")
    subscriber_count: str = Field(..., alias="subscriberCount")
    hidden_subscriber_count: bool = Field(..., alias="hiddenSubscriberCount")
    video_count: str = Field(..., alias="videoCount")


class TopicDetails(BaseModel):
    topic_ids: List[str] = Field(..., alias="topicIds")
    topic_categories: List[str] = Field(..., alias="topicCategories")


class Status(BaseModel):
    privacy_status: str = Field(..., alias="privacyStatus")
    is_linked: bool = Field(..., alias="isLinked")
    long_uploads_status: str = Field(..., alias="longUploadsStatus")
    made_for_kids: bool = Field(..., alias="madeForKids")


class Channel(BaseModel):
    title: str
    description: str = ""
    keywords: str
    unsubscribed_trailer: str = Field("", alias="unsubscribedTrailer")
    country: str = ""


class Image(BaseModel):
    banner_external_url: str = Field(..., alias="bannerExternalUrl")


class BrandingSettings(BaseModel):
    channel: Channel
    image: Image


class ChannelsItem(BaseModel):
    kind: str
    etag: str
    id: str
    snippet: Snippet
    content_details: ContentDetails = Field(..., alias="contentDetails")
    statistics: Statistics
    topic_details: TopicDetails = Field(
        TopicDetails(topicIds=[], topicCategories=[]), alias="topicDetails"
    )
    status: Status
    branding_settings: BrandingSettings = Field(..., alias="brandingSettings")
    content_owner_details: Dict[str, Any] = Field(..., alias="contentOwnerDetails")


class Channels(BaseModel):
    kind: str
    etag: str
    page_info: PageInfo = Field(..., alias="pageInfo")
    items: List[ChannelsItem]
